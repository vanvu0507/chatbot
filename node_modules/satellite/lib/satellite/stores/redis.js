// Generated by CoffeeScript 1.3.1
(function() {
  var _this = this;

  exports.addresses = {
    add: function(address, cb) {
      var key;
      key = "" + address.host + "_" + address.port;
      return _this.redisClient.hset(key, 'host', address.host, function(res) {
        return _this.redisClient.hset(key, 'port', address.port, function(res) {
          return _this.redisClient.sadd("" + _this.namespace + "_addresses", key, function(err, data) {
            res = !err ? 'success' : "error: " + err;
            return cb(res);
          });
        });
      });
    },
    remove: function(address, cb) {
      var key;
      key = "" + address.host + "_" + address.port;
      return _this.redisClient.srem("" + _this.namespace + "_addresses", key, function(res) {
        return _this.redisClient.del(key, function(res) {
          return cb('success');
        });
      });
    },
    get: function(cb) {
      var resultSet;
      resultSet = [];
      return _this.redisClient.smembers("" + _this.namespace + "_addresses", function(err, members) {
        var member, _i, _len, _results;
        if (members.length > 0) {
          _results = [];
          for (_i = 0, _len = members.length; _i < _len; _i++) {
            member = members[_i];
            _results.push(_this.redisClient.hgetall(member, function(err, hash) {
              if (hash != null) {
                resultSet.push(hash);
              }
              if (members.indexOf(member) === members.length - 1) {
                return cb(resultSet);
              }
            }));
          }
          return _results;
        } else {
          return cb(resultSet);
        }
      });
    }
  };

  exports.targetAddress = {
    get: function(cb) {
      return _this.redisClient.hgetall("" + _this.namespace + "_targetaddress", function(err, ta) {
        return cb(ta);
      });
    },
    set: function(value, cb) {
      return _this.redisClient.hset("" + _this.namespace + "_targetaddress", 'host', value.host, function(err, ta) {
        return _this.redisClient.hset("" + _this.namespace + "_targetaddress", 'port', value.port, function(err, ta) {
          return cb(value);
        });
      });
    }
  };

  exports.targetAddressIndex = {
    get: function(cb) {
      return _this.redisClient.get("" + _this.namespace + "_targetaddressindex", function(err, tai) {
        return cb(tai);
      });
    },
    increment: function(cb) {
      return _this.redisClient.incr("" + _this.namespace + "_targetaddressindex", function(err, tai) {
        return cb('success');
      });
    },
    reset: function(cb) {
      return _this.redisClient.set("" + _this.namespace + "_targetaddressindex", 0, function(err, tai) {
        return cb('success');
      });
    }
  };

  exports.stickySessions = {
    get: function(keyOrCb, cb) {
      var resultSet;
      if (cb == null) {
        cb = null;
      }
      if (cb === null) {
        resultSet = {};
        return _this.redisClient.smembers("" + _this.namespace + "_stickysessions", function(err, ss) {
          var item, _i, _len, _results;
          if (ss.length === 0) {
            return keyOrCb(resultSet);
          } else {
            _results = [];
            for (_i = 0, _len = ss.length; _i < _len; _i++) {
              item = ss[_i];
              _results.push(_this.redisClient.hgetall(item, function(err, hash) {
                resultSet[item] = hash;
                if (ss.indexOf(item) === ss.length - 1) {
                  return keyOrCb(resultSet);
                }
              }));
            }
            return _results;
          }
        });
      } else {
        return _this.redisClient.hgetall(keyOrCb, function(err, hash) {
          if (hash === null) {
            hash = void 0;
          }
          return cb(hash);
        });
      }
    },
    set: function(key, value, response) {
      return _this.redisClient.hset(key, 'host', value.host, function(res) {
        return _this.redisClient.hset(key, 'port', value.port, function(res) {
          return _this.redisClient.sadd("" + _this.namespace + "_stickysessions", key, function(err, data) {
            return response('success');
          });
        });
      });
    },
    "delete": function(key, cb) {
      return _this.redisClient.srem("" + _this.namespace + "_stickysessions", key, function(res) {
        return _this.redisClient.del(key, function(err, ss) {
          return cb('success');
        });
      });
    }
  };

}).call(this);
